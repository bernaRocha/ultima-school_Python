Read the Doc
    https://python-guide-pt-br.readthedocs.io/pt_BR/latest/intro/learning.html

Tutorial de Python
    https://docs.python.org/pt-br/3/tutorial/index.html


The integer numbers (e.g. 2, 4, 20) have type int, the ones with a fractional part (e.g. 5.0, 1.6) have type float.
We will see more about numeric types later in the tutorial.

Division (/) always returns a float. To do floor division and get an integer result 
(discarding any fractional result) you can use the // operator; to calculate the remainder you can use %:

>>> 'spam eggs'  # single quotes
'spam eggs'
>>> 'doesn\'t'  # use \' to escape the single quote...
"doesn't"
>>> "doesn't"  # ...or use double quotes instead
"doesn't"
>>> '"Yes," they said.'
'"Yes," they said.'
>>> "\"Yes,\" they said."
'"Yes," they said.'
>>> '"Isn\'t," they said.'
'"Isn\'t," they said.'

Listas:

squares = [1, 4, 9, 16, 25]
squares.append(216)
[1, 4, 9, 16, 25, 216]

Lista de listas:

>>> a = ['a', 'b', 'c']
>>> n = [1, 2, 3]
>>> x = [a, n]
>>> x
[['a', 'b', 'c'], [1, 2, 3]]
>>> x[0]
['a', 'b', 'c']
>>> x[0][1]
'b'

https://pt.wikipedia.org/wiki/Sequ%C3%AAncia_de_Fibonacci

### 
Mas então como saber quando um parâmetro é passado como valor ou como referência? 
A própria documentação do Python já nos dá uma dica:

  Se temos um objeto mutável (list, dict, set, etc.), podemos usar algumas operações 
  específicas para modificá-lo e todas as variáveis que referenciam esse objeto irão ver 
  essa mudança. [exemplo de passagem por referência] 

  Se temos um objeto imutável (str, int, tuple, etc.), todas as variáveis que o referenciam 
  irão sempre ver o mesmo valor, mas operações que transformam esse valor em um novo valor 
  irão sempre retornar um novo objeto. [exemplo de passagem por valor]

  Fonte: https://docs.python.org/3/faq/programming.html#why-did-changing-list-y-also-change-list-x — conteúdo em inglês.

objetos são representações de entidades físicas ou lógicas do mundo real, 
e entidades que possamos identificar e representar através de características e/ou ações.

As classes, por sua vez, são as formas como esses objetos serão representados, 
e cada objeto representa uma «instância» de uma classe, isto é, uma representação 
real de uma classe. E são nas classes que definimos quais são os atributos 
(características) e as ações que aquela classe tem.

Instanciar = criar um objeto a partir de uma classe
Atributos/Ações = Funções que o determinado objeto pode fazer

# “...proporcionam uma forma de organizar dados e funcionalidades juntos. 
Criar uma nova classe cria um novo ‘tipo’ de objeto, permitindo que novas ‘instâncias’ 
desse tipo sejam produzidas. Cada instância da classe pode ter atributos anexados a ela, 
para manter seu estado. Instâncias da classe também podem ter métodos 
(definidos pela classe) para modificar seu estado.”

As classes possuem métodos(atributos/ funções) 

A palavra self. 
Essa palavra reservada do Python é usada para representar o objeto (ou a instância) 
da classe que estamos criando, e ele deve sempre ser o primeiro argumento de todos 
os métodos criados dentro da nossa classe. 